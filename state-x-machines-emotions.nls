;;; Xmachines and emotions.
;;; Version 2, 2013 Ilias Sakellariou
;;; Version 3, 2016 Ilias Sakellariou
;;; Version 3.1, 2017 Ilias Sakellariou (ported to NetLogo 6.0)
;;; Note: This is a modified version of the TSTATES Library, that directly supports X-Machine Execution. The trick comes from 
;;; modifying the transition from "condition" - "action" to a x-func transition that has a commitment part, generated automatically by the function 
;;; if the latter succeeds. This part is actually the output and the memory values that form the "output" of the function triggered. 
;;; Thus, with little modifications the TSTATES library hosts now X-machines. 

;;; Should point out that the TSTATES lib actually invokes special form of functions. 
;;;  list of variables required for each turtle.
;;; states (holds the state information)
;;; memory (holds the memory structure (X-Machines) )
;;; percept (holds the percept information(X-Machines) )



;;; Changes 
;; a) Functions do not need the Percept Memory Emotion parameters. These are predetermined. 
;; b) Memory is now a table (better handling)
;; c) Output is now an action. 
;; d) Code Cleanup (2016)
;; e) Changed Vars needed for each turtle (see above)


extensions [table]

;;; Loading Files

__includes ["sxm-emotions.nls"]

;;; Simple X-machines (With emotions aka eXM)
;;; Initialisation (a) State machine (b) memory (c) emotions
;;; Initialises all structures.
to initialise-ex-machine
   initialise-state-machine 
   init-x-memory
   init-x-emotions
end

;;; Executes the eXM machine.
;;; This is a two step process, i.e. it executes the state machine performing the transitions, 
;;; and updates the emotions. This is the main procedure that should be called in every cycle. 
to execute-exsm-machine
   execute-state-machine
   update-emotions#xsm
end 

;;; state definition
;;; Loads the code of the state in memory
;;; Carefull sname#sm here is a string representing the state name.
;;; BUT the active state is a list (name mod). 
to load-state#sm [sname#sm]
    ;; loads only if we are at a different state
    if current-state-name#sm != sname#sm 
    [let states-matched#sm filter [[?x] -> state-name#sm ?x = sname#sm] state-definition-of#sm  ;;  This loads all the code.   
     if empty? states-matched#sm [user-message (word "Tutrle " who ":Error possibly incorrect state nane: " sname#sm ". Previous-state:: " current-state-name#sm) stop]
     set#sm "active-states-code" fput state-code#sm first states-matched#sm but-first get#sm "active-states-code" ;; select the first of the matched code.
     set#sm "active-states" fput state-name-and-mode#sm first states-matched#sm but-first get#sm "active-states"  ;; remove the topmofthe stack and then put the new one.
     ] 
end 


to activate-machine#sm [machine-name#sm]
    ;; The new machine is on top
    set#sm "active-machines" fput taskify#sm (word "state-def-of-" machine-name#sm) get#sm "active-machines"
    set#sm "active-machine-names" fput machine-name#sm get#sm "active-machine-names"
    ;; get the initial state in place
    push-state#sm init-state#sm
end

;;; push is deffent to load since the previous state is not removed.    
to push-state#sm [sname#sm]
  let states-matched#sm filter [[?x] -> state-name#sm ?x = sname#sm] state-definition-of#sm  ;;  This loads all the code.  
     if empty? states-matched#sm [user-message (word "Error possibly incorrect state nane: " sname#sm ".") stop]
     set#sm "active-states-code" fput state-code#sm first states-matched#sm get#sm "active-states-code" ;; select the first of the matched code and add it.
     set#sm "active-states" fput state-name-and-mode#sm first states-matched#sm get#sm "active-states"  ;; put the new state machine to the stack 
end

;; success 1 / fail 0 
;; unloading means that the machine is now off. So forget about it.
to deactivate-machine#sm [mode#sm]
    
    set#sm "active-states" but-first get#sm "active-states"             ; removing the current active state
    set#sm "active-states-code" but-first get#sm "active-states-code "  ; removing the current active state code

    let returning-machine first get#sm "active-machine-names"   ; keep the name 
    set#sm "active-machine-names" but-first get#sm "active-machine-names" ;; kill the machine name  
    set#sm "active-machines" but-first get#sm "active-machines" ; disabling the machine
    ;; so now the calling state is on top
    ;; assert-result#sm mode#sm current-state-name#sm
    ;; we are pushing here the semantic limits of the language.
    
    ; Functional can be sometimes nice!
    set#sm "active-states" fput (list current-state-name#sm 
     ifelse-value (mode#sm)
       [fput returning-machine remove returning-machine current-state-mode-true#sm]
       [remove returning-machine current-state-mode-true#sm]
     ifelse-value (mode#sm)
       [remove returning-machine current-state-mode-false#sm]  
       [fput returning-machine remove returning-machine current-state-mode-false#sm]
       )
        but-first get#sm "active-states"

end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; State Operations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; New Table representation

;;; Setters and Getters (this is too OO).
to set#sm [structure#sm value#sm]
  table:put states structure#sm value#sm
end

to-report get#sm [structure#sm]
  report table:get states structure#sm 
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Reports the current state of the agent.
to-report current-state#sm
  report first get#sm "active-states"
end 

to-report current-state-name#sm
  report first current-state#sm
end

to-report current-state-mode-true#sm
  report item 1 current-state#sm
end

to-report current-state-mode-false#sm
  report item 2 current-state#sm
end

to-report current-state-code#sm
  report first get#sm "active-states-code"
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Utilities to check previous states
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report state-stack#sm
 report map first get#sm "active-states" 
end

;;; Reports true if the state that invoked the current state is 
;;; that of the parameter
to-report invoked-from [ state#sm ]
  let sts state-stack#sm
  report (length sts > 1 and item 1 sts = state#sm) 
end

;;; Reports true if the state of the parameter is active (in stack)
to-report previous-active-state [ state#sm ]
  report member? state#sm state-stack#sm
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Init active-states as a list
;;; get the first as the active state
;;; Load it.
to initialise-state-machine
  ;; Coudl be removed in a late implementation
  ;set outs []
  
  set states table:make
 
  ;; dummy states and dummy code was entered so that we have a uniform (and fast) load-state code.
  set#sm "active-states" [["dumy-initial-state#sm" [] [] ]]
  set#sm "active-states-code" ["dumy-code#sm"]
  set#sm "active-machines" (list taskify#sm (word "state-def-of-" breed)) ;; init the primary machine
  set#sm "active-machine-names" (list breed) ;; set the name of the active machine
  load-state#sm init-state#sm
end


;;; Main code for executing the state machine
to execute-state-machine
  ;set outs []
  let trans#sm filter [[?x] -> runresult first ?x] current-state-code#sm ;; so only valid transitions are in list!
;  if check? [
;         set max-trans ifelse-value (max-trans > length trans#sm) [max-trans] [length trans#sm]
;         if length trans#sm > 1 [output-show (word current-state-name#sm" " length trans#sm )  ]
;         ]
  ifelse not empty? trans#sm 
     [let current-transition first trans#sm   ; we pick up the first transition
      run trans-action#sm current-transition  ; action
      run trans-target#sm current-transition] ; change of state to target state
   [show (word "No state transition applicable from " current-state-name#sm)
   ; if check? [output-show percept output-show memory]  
     ] 
end 

;;; no need to specify anything else. 
;;; takes the reporter created during machine init by other  
to-report state-definition-of#sm
     report runresult first get#sm "active-machines"
end 

;;; Check one state for invalid transitions
;;; Internal as the name indicates <>#sm
to check-a-state#sm [state-descr#sm all-states#sm]
  let sname#sm state-name#sm state-descr#sm
  foreach (but-first state-descr#sm) 
    [[?x] -> if (not member? (last ?x) all-states#sm) 
      [show (word "From state::" sname#sm " transition to undefined state " (last ?x))] ] 
end

;;; ((state-name true-list false-list) (cond action target_state) (cond action target_state))
;;; So the idea is to first make everything a list of strings and then 
;;; compile the code.

;;; State Data structure operations
to-report init-state#sm
  report  state-name#sm first runresult first get#sm "active-machines"
end 


;;; A transition is of the form (cond action target_state)
;;; transition manipulation reporters
to-report trans-condition#sm [trans#sm]
  report first trans#sm
end

;;; transition action
to-report trans-action#sm [trans#sm]
  report item 1 trans#sm
end 

;;; transistion target state
to-report trans-target#sm [trans#sm]
  report item 2 trans#sm
end

;;; state-manipulation reporters
to-report state-name#sm [state#sm]
  report first first state#sm
end

;;; A state has the form
;;; ((state-name true-list false-list) (cond action target_state) (cond action target_state))

;;; truelist
to-report state-mode-true#sm [state#sm]
  report item 1 state-name-and-mode#sm state#sm
end

;;; falselist
to-report state-mode-false#sm [state#sm]
  report item 2 state-name-and-mode#sm state#sm
end

;; report the name and mode information of the state
to-report state-name-and-mode#sm [state#sm]
  report first state#sm
end

;;; reports the code of the state  
to-report state-code#sm [state#sm]
  report but-first state#sm
end
;;;;;;;;;;;;;;;; Diagram Creation ;;;;;;;;;;;;;;;;;;;;;;;
;;; Denotes the start of the diagram
to-report x-diagram [diagram#sm]
  report diagram#sm
end

;;; denotes the end of the State Machine diagram
to-report end-diagram
  report []
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; State operators 
;;; Nice. Check out the lists that are true false.
to-report state [sname#sm incomplete-state#sm diagram#sm]
  report fput (fput (list sname#sm  [] [] ) incomplete-state#sm) diagram#sm
end 

to-report end-state
  report []
end

to-report # [trans#sm statedef#sm]
  report fput trans#sm statedef#sm
end
;;; Condition Part of transition description
to-report when [action-condition#sm incomplete-state#sm]
  report fput taskify#sm action-condition#sm incomplete-state#sm
end 

to-report otherwise [incomplete-state#sm]
  ;;report fput taskify#sm "true" incomplete-state#sm
  report fput [ []-> true] incomplete-state#sm
end   
  
to-report on-success [machine#sm incomplete-state#sm]
 ; report fput taskify#sm (word "ifelse-value (member? \"" machine#sm "\" current-state-mode-true#sm) [true][false]") incomplete-state#sm
  report fput [[] ->  ifelse-value (member? machine#sm current-state-mode-true#sm) [true][false]] incomplete-state#sm
end 

to-report on-failure [machine#sm incomplete-state#sm]
  ;report fput taskify#sm (word "ifelse-value (member? \"" machine#sm "\" current-state-mode-false#sm) [true][false]") incomplete-state#sm
  report fput [[] -> ifelse-value (member? machine#sm current-state-mode-false#sm) [true][false]] incomplete-state#sm
end   

to-report for-n-ticks [n incomplete-state]
  let t ticks + n
  ;;show (word "ticks:here:" t)
  report fput ( [ [] -> ticks < t]) incomplete-state
end   

to-report after-n-ticks [n incomplete-state]
  let t ticks + n
  ;;show (word "ticks:here:" t)
  report fput ([[] -> ticks  > t]) incomplete-state
end   

;;; Action Part of transition description
  
to-report do [action#sm incomplete-state#sm]
  report fput taskify#sm action#sm incomplete-state#sm
end 

to nothing
end

to no-action
end

;;; Transition part indicating target states 
to-report goto [sname#sm]
  report (list [[] -> load-state#sm sname#sm])
end

;; needs a bit of feeling up.
to-report activate-machine [sname#sm]
  report (list [[] -> activate-machine#sm sname#sm] )
end

;; Sucess state - deactivates the machine and changes the status to 1
to-report success 
  report (list [[]-> deactivate-machine#sm true]) 
end

;; Fialure state - deactivates the machine and sets status to 0
to-report failure
  report (list [[]-> deactivate-machine#sm false])
end

;;; Taskify Utility. 
to-report taskify#sm [what#sm]
  report runresult (word "[[] -> " what#sm " ]")
end
  
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Xmachine Formalism Related Procedures
to-report x-func [xfunction#sm incomplete-state#sm]
  report fput [[] -> xfunc#xsm xfunction#sm] (fput [[] -> func-commit#xsm xfunction#sm] incomplete-state#sm) 
end 

;;; this is the executable 

to-report xfunc#xsm [x-function]
 report first runresult x-function   
end 


;;; template [ <function-name> <output> <memory updates>]
;;; Example:: template ["perceiveDanger" [task [fd 1] task [rt 2]] [["speed" 32] ["stamina" 19]]]
;;; [functionName Output Memory]
to func-commit#xsm [x-function]
  let res runresult x-function
  update-x-memory#sxm item 2 res
  run-x-actions#sxm item 1 res
end

;;; Executing Actions upon function commit. Since actions are
;;; in a list, its means that the we execute each function in order. 
to run-x-actions#sxm [Actions]
  foreach Actions
    [[?x] -> run ?x]  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Memory Functions 
;;; Updates the memory Using a list (internal)
to update-x-memory#sxm [MemoryChanges#xsm]
  foreach MemoryChanges#xsm
    [ [?x] -> ifelse (table:has-key? memory (item 0 ?x) )
       [table:put memory (item 0 ?x) (item 1 ?x)]
       [show (word "Error! There is no such memory value " (item 0 ?x) ) ]
   ]
end

;;; Memory is now a table. 
;;; init-x-memory [<memorVars >]
to init-x-memory ; [VarsValues#xsm]
   set memory table:make
end

;;; Declaring initial memory elements and values.
to x-mem-initial-var [Var#xsm Value#xsm]
  table:put memory Var#xsm Value#xsm
end

;;; Setting a value. Used OUTSIDE transition definitions
;;; Does error checking
to set-x-memory-value [MemVar#xsm Value#xsm ]
  ifelse (table:has-key? memory MemVar#xsm )
       [table:put memory MemVar#xsm Value#xsm]
       [show (word "Error! There is no such memory value " MemVar#xsm) ] 
end 



;;; Setting a value. Used INSIDE transition definitions
to-report x-mem-set [MemVar#xsm Value#xsm Updates#xsm]
  report fput (list MemVar#xsm Value#xsm) Updates#xsm
end

;;; Get the value of a memory value
to-report x-mem-value [MemVar#xsm]
  report table:get memory MemVar#xsm
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Action Definition
;;; An action definition is a list of NetLogo tasks that 
;;; are going to be executed when the transition is selected.

;;; Adds a new action to the list of actions. 
to-report x-action [Action#xsm RestActions#xsm]
  report fput Action#xsm RestActions#xsm
end

;;;  True part of xfunction
to-report x-true [Actions#xsm MemUpdates#xsm]
  report (list true Actions#xsm MemUpdates#xsm)
end 

;;; The false part of the xfunction
to-report  x-false 
  report [false]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Percepts
;;; Percepts are in a list, so that we can have dublicate percepts (so we could not use 
;;; arrays or tables).
;; Checking that a percept exists
;;; x-percept-add Name Value

;;; Clearing Percepts
to x-clear-percepts
  set percept []
end

;;; Adding a percept-value pair.
to x-add-percept-value [perc-name#xsm perc-value#xsm]
   set percept fput (list perc-name#xsm perc-value#xsm) percept
end

;;; Adding a percept (dummy value "x-nil")
to x-add-percept [perc-name#xsm]
  x-add-percept-value perc-name#xsm "x-nil"
  ;set percept fput (list perc-name#xsm "x-nil") percept
end

;;; Checks if there is a percept-value pair in the percepts
to-report x-has-percept? [perc-name#xsm]
  report  not empty? filter [[?x] -> first ?x = perc-name#xsm] percept
end

;;; Reports the first percept-value
to-report x-percept-value [perc-name#xsm]
  report  item 1 first filter [ [?x] -> first ?x = perc-name#xsm] percept
end

;;; Reports one of values in percept-value pairs
to-report x-oneof-percept-value [perc-name#xsm]
  report  item 1 one-of filter [ [?x] -> first ?x = perc-name#xsm] percept
end
 
;;; Reports all values for the specific percept as a list 
to-report x-all-percept-values [perc-name#xsm]
  report  map [ [?x] -> item 1 ?x] (filter [[?x] -> first ?x = perc-name#xsm] percept)
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Syntax Related Functions.

;;; Dummy Just Syntactic Sugar
;;; Start of memory updates
to-report #< [Arg]
  report Arg
end

;;; end of memotry updates
to-report >#
  report []
end 






